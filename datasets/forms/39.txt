 ---webpage-start---  ---html-start---  ---index.html--- <!DOCTYPE html> <html > <head> <meta charset="UTF-8"> <title>Search animation</title> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css"> <link rel="stylesheet" href="css/style.css"> </head> <body> <div id="root" class="root"> <div class="container"> <div class="header"> <div class="menu"> <span class="hamb"> <span class="row"></span> <span class="row"></span> <span class="row"></span> </span> </div> <svg class="curve-background"> <path class="curve-open" fill="#313131" d="M740,60 L740,0 680,0 C690,50, 690,50 740,60"/> <path class="curve-close" fill="#FFD34E" d="M0,405 L0,405 740,405 740,405 C370,440 370,440 740,405"/> </svg> <div class="search"> <svg class="search-icon" enable-background="new 0 0 50 50" height="34px" viewBox="0 0 50 50" width="34px"> <rect fill="none" height="50" width="50"/> <circle cx="21" cy="20" fill="none" r="15" stroke="#fff" stroke-width="5"/> <line class="search-line" fill="none" stroke="#fff" stroke-width="5" x1="32.229" x2="49.9" y1="32.229" y2="49.9"/> </svg> <span class="close">âœ–</span> </div> </div> <div class="text"> <h1 class="search-text">search</h1> <input type="text" class="search-input"/> </div> <div class="intro"> <h1>Click Search Button</h1> </div> <div class="footer"> <ul class="list"> <li class="list-item"></li> <li class="list-item"></li> <li class="list-item"></li> <li class="list-item"></li> <li class="list-item"></li> <li class="list-item"></li> <li class="list-item"></li> </ul> </div> </div> </div> <script src="js/index.js"></script> </body> </html>  ---html-end---  ---css-start---  ---style.css--- @import url("https://fonts.googleapis.com/css?family=Roboto:500,500italic,400,400italic,300,300italic"); * { box-sizing: border-box; } html, body { height: 100%; } body { margin: 0; padding: 0; background: #ffd34e; font-family: 'Roboto', serif; } #root { display: flex; height: inherit; } .container { width: 740px; height: 435px; background: #ffd34e; margin: auto; box-shadow: 0 0 20px 5px rgba(0,0,0,0.2); display: flex; flex-direction: column; justify-content: space-between; position: relative; } .container .curve-background { overflow: hidden; position: absolute; width: 740px; left: 0; height: 405px; } .search-open .container .curve-background .curve-close { opacity: 0; } .search-close .container .curve-background .curve-close { opacity: 1; } .container .header { display: flex; justify-content: space-between; } .container .header .menu, .container .header .search { width: 60px; height: 60px; background: #313131; transition: background 0.5s ease-out 0s; z-index: 50; position: relative; cursor: pointer; } .search-open .container .header .menu, .search-open .container .header .search { background: #ffd34e; } .search-close .container .header .menu, .search-close .container .header .search { background: #313131; } .container .header .menu .close, .container .header .search .close { opacity: 0; font-size: 2.5rem; color: #fff; position: absolute; left: 15px; top: 0; } .search-open .container .header .menu .close, .search-open .container .header .search .close { opacity: 1; } .search-close .container .header .menu .close, .search-close .container .header .search .close { opacity: 0; } .container .header .menu { border-bottom-right-radius: 50%; text-align: center; line-height: 70px; } .container .header .menu .hamb { display: inline-block; width: 30px; height: 18px; line-height: 0; } .container .header .menu .hamb .row { display: inherit; background: #fff; height: 4px; margin-bottom: 3px; width: 100%; } .container .header .search { border-bottom-left-radius: 50%; text-align: center; padding: 13px 0; } .container .header .search circle, .container .header .search .search-line { stroke: #fff; transition: stroke 0.4s ease-out; } .search-open .container .header .search .search-icon { animation: search-open 1s forwards; } .search-open .container .header .search .search-icon circle, .search-open .container .header .search .search-icon .search-line { stroke: #313131; } .search-close .container .header .search .search-icon { animation: search-close 0.5s forwards; } .search-close .container .header .search .search-icon circle, .search-close .container .header .search .search-icon .search-line { stroke: #fff; } .container .text { text-align: center; color: #fff; z-index: 10; font-size: 1.3rem; margin-top: -90px; transition: opacity 0.5s ease-in; } .container .text .search-input { height: 40px; border: none; border-radius: 3px; width: 0; transition: all 0.5s ease-out 0.4s; padding: 0; } .search-open .container .text .search-input { width: 270px; } .search-close .container .text .search-input { transition: all 0s; width: 0; } .container .text .search-text { transform: translate(0, 40px); margin: 0; transition: all 0.5s ease-out 0.4s; opacity: 0; margin-bottom: 10px; } .search-open .container .text .search-text { opacity: 1; transform: translate(0, 0); } .search-close .container .text .search-text { transition: all 0s; transform: translate(0, 40px); opacity: 0; } .container .intro { color: #fff; text-align: center; position: absolute; top: 165px; width: 100%; transition: opacity 0.3s ease-in; } .search-open .container .intro { opacity: 0; } .search-close .container .intro { opacity: 1; } .container .footer { background: #fff; height: 30px; text-align: center; line-height: 30px; } .container .footer .list { margin: 0; padding: 0; display: inline-block; list-style: none; } .container .footer .list .list-item { display: inline-block; width: 7px; height: 7px; border-radius: 7px; margin-right: 15px; background: #c0c0c0; } @-moz-keyframes search-open { 50% { transform: translate3d(-350px, 187px, 0) rotate(180deg); } 100% { transform: translate3d(-225px, 187px, 0) rotate(360deg); } } @-webkit-keyframes search-open { 50% { transform: translate3d(-350px, 187px, 0) rotate(180deg); } 100% { transform: translate3d(-225px, 187px, 0) rotate(360deg); } } @-o-keyframes search-open { 50% { transform: translate3d(-350px, 187px, 0) rotate(180deg); } 100% { transform: translate3d(-225px, 187px, 0) rotate(360deg); } } @keyframes search-open { 50% { transform: translate3d(-350px, 187px, 0) rotate(180deg); } 100% { transform: translate3d(-225px, 187px, 0) rotate(360deg); } } @-moz-keyframes search-close { 0% { transform: translate3d(-225px, 187px, 0) rotate(0deg); } 100% { transform: translate3d(0px, 0px, 0) rotate(360deg); } } @-webkit-keyframes search-close { 0% { transform: translate3d(-225px, 187px, 0) rotate(0deg); } 100% { transform: translate3d(0px, 0px, 0) rotate(360deg); } } @-o-keyframes search-close { 0% { transform: translate3d(-225px, 187px, 0) rotate(0deg); } 100% { transform: translate3d(0px, 0px, 0) rotate(360deg); } } @keyframes search-close { 0% { transform: translate3d(-225px, 187px, 0) rotate(0deg); } 100% { transform: translate3d(0px, 0px, 0) rotate(360deg); } }  ---css-end---  ---js-start---  ---index.js--- 'use strict'; window.requestAnimFrame = function () { return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) { window.setTimeout(callback, 1000 / 60); }; }(); window.onload = function () { var $search = document.querySelector('.search'); var $root = document.querySelector('.root'); var $curveOpen = document.querySelector('.curve-open'); var $curveClose = document.querySelector('.curve-close'); var stateOpen = { topPointX: 680, bottomPointY: 60, curvePointX: 690, curvePointY: 50 }; var propsOpen = { topPointX: -150, bottomPointY: 500, curvePointX: -150, curvePointY: 450 }; var stateClose = { leftPointY: 405, rightPointY: 405, curvePointY: 500 }; var propsClose = { leftPointY: 0, rightPointY: 0, curvePointY: 0 }; var drawClose = function drawClose(_ref) { var leftPointY = _ref.leftPointY; var rightPointY = _ref.rightPointY; var curvePointY = _ref.curvePointY; $curveClose.setAttribute('d', 'M0,' + leftPointY + ' L0,405 740,405 740,' + rightPointY + ' C370,' + curvePointY + ' 370,' + curvePointY + ' 0,' + leftPointY); }; var drawOpen = function drawOpen(_ref2) { var topPointX = _ref2.topPointX; var bottomPointY = _ref2.bottomPointY; var curvePointX = _ref2.curvePointX; var curvePointY = _ref2.curvePointY; $curveOpen.setAttribute('d', 'M740,' + bottomPointY + ' L740,0 ' + topPointX + ',0 C' + curvePointX + ',' + curvePointY + ' ' + curvePointX + ',' + curvePointY + ' 740,' + bottomPointY); }; $search.addEventListener('click', function () { var classes = $root.classList; if (classes.contains('search-open') && classes.contains('search-close')) { classes.remove('search-close'); animate(300, drawOpen, stateOpen, propsOpen); } else if (classes.contains('search-open')) { classes.add('search-close'); animate(300, drawClose, stateClose, propsClose); } else { classes.add('search-open'); animate(300, drawOpen, stateOpen, propsOpen); } }); var animate = function animate(time, draw, state, props) { var fCount = 1; var start = performance.now(); var framesCount = time / (1000 / 60); var keys = Object.keys(props); var deltaState = {}; var stepState = {}; keys.map(function (i) { state[i] < props[i] ? deltaState[i] = props[i] - state[i] : deltaState[i] = -(state[i] - props[i]); }); var _animate = function _animate(timestamp) { if (timestamp - start < time) { keys.map(function (j) { stepState[j] = state[j] + deltaState[j] * (fCount / framesCount); }); draw(stepState); fCount++; requestAnimFrame(_animate); } else { if (fCount <= framesCount) { draw(props); } } }; requestAnimFrame(_animate); }; };  ---js-end---  ---webpage-end---
